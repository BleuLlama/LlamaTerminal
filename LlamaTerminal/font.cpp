/* 
 * font
 *
 *  Internal font, file font, settings support
 */

/*
 * The MIT License (MIT)
 * Copyright (c) 2016 Scott Lawrence
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QDir>
#include <QDebug>
#include <QImage>
#include <QFileInfo>
#include "font.h"

/*
 * font.c
 *
 *  a bitmapped font for use in the system
 *
 *  copied from the Turaco source code, December 1998
 *
 *  2000.01.02
 *  yorgle@gmail.com
 */

unsigned char __vga_font[ 256 * 8 ] = {
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x7e, 0x81, 0xa5, 0x81,  0xbd, 0x99, 0x81, 0x7e,
            0x7e, 0xff, 0xdb, 0xff,  0xc3, 0xe7, 0xff, 0x7e,
            0x6c, 0xfe, 0xfe, 0xfe,  0x7c, 0x38, 0x10, 0x00,
            0x10, 0x38, 0x7c, 0xfe,  0x7c, 0x38, 0x10, 0x00,
            0x38, 0x7c, 0x38, 0xfe,  0xfe, 0x7c, 0x38, 0x7c,
            0x10, 0x10, 0x38, 0x7c,  0xfe, 0x7c, 0x38, 0x7c,
            0x00, 0x00, 0x18, 0x3c,  0x3c, 0x18, 0x00, 0x00,
            0xff, 0xff, 0xe7, 0xc3,  0xc3, 0xe7, 0xff, 0xff,
            0x00, 0x3c, 0x66, 0x42,  0x42, 0x66, 0x3c, 0x00,
            0xff, 0xc3, 0x99, 0xbd,  0xbd, 0x99, 0xc3, 0xff,
            0x0f, 0x07, 0x0f, 0x7d,  0xcc, 0xcc, 0xcc, 0x78,
            0x3c, 0x66, 0x66, 0x66,  0x3c, 0x18, 0x7e, 0x18,
            0x3f, 0x33, 0x3f, 0x30,  0x30, 0x70, 0xf0, 0xe0,
            0x7f, 0x63, 0x7f, 0x63,  0x63, 0x67, 0xe6, 0xc0,
            0x99, 0x5a, 0x3c, 0xe7,  0xe7, 0x3c, 0x5a, 0x99,
            0x80, 0xe0, 0xf8, 0xfe,  0xf8, 0xe0, 0x80, 0x00,
            0x02, 0x0e, 0x3e, 0xfe,  0x3e, 0x0e, 0x02, 0x00,
            0x18, 0x3c, 0x7e, 0x18,  0x18, 0x7e, 0x3c, 0x18,
            0x66, 0x66, 0x66, 0x66,  0x66, 0x00, 0x66, 0x00,
            0x7f, 0xdb, 0xdb, 0x7b,  0x1b, 0x1b, 0x1b, 0x00,
            0x3e, 0x63, 0x38, 0x6c,  0x6c, 0x38, 0xcc, 0x78,
            0x00, 0x00, 0x00, 0x00,  0x7e, 0x7e, 0x7e, 0x00,
            0x18, 0x3c, 0x7e, 0x18,  0x7e, 0x3c, 0x18, 0xff,
            0x18, 0x3c, 0x7e, 0x18,  0x18, 0x18, 0x18, 0x00,
            0x18, 0x18, 0x18, 0x18,  0x7e, 0x3c, 0x18, 0x00,
            0x00, 0x18, 0x0c, 0xfe,  0x0c, 0x18, 0x00, 0x00,
            0x00, 0x30, 0x60, 0xfe,  0x60, 0x30, 0x00, 0x00,
            0x00, 0x00, 0xc0, 0xc0,  0xc0, 0xfe, 0x00, 0x00,
            0x00, 0x24, 0x66, 0xff,  0x66, 0x24, 0x00, 0x00,
            0x00, 0x18, 0x3c, 0x7e,  0xff, 0xff, 0x00, 0x00,
            0x00, 0xff, 0xff, 0x7e,  0x3c, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x30, 0x78, 0x78, 0x30,  0x30, 0x00, 0x30, 0x00,
            0x6c, 0x6c, 0x6c, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x6c, 0x6c, 0xfe, 0x6c,  0xfe, 0x6c, 0x6c, 0x00,
            0x30, 0x7c, 0xc0, 0x78,  0x0c, 0xf8, 0x30, 0x00,
            0x00, 0xc6, 0xcc, 0x18,  0x30, 0x66, 0xc6, 0x00,
            0x38, 0x6c, 0x38, 0x76,  0xdc, 0xcc, 0x76, 0x00,
            0x60, 0x60, 0xc0, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x18, 0x30, 0x60, 0x60,  0x60, 0x30, 0x18, 0x00,
            0x60, 0x30, 0x18, 0x18,  0x18, 0x30, 0x60, 0x00,
            0x00, 0x66, 0x3c, 0xff,  0x3c, 0x66, 0x00, 0x00,
            0x00, 0x30, 0x30, 0xfc,  0x30, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x30, 0x30, 0x60,
            0x00, 0x00, 0x00, 0xfc,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x30, 0x30, 0x00,
            0x06, 0x0c, 0x18, 0x30,  0x60, 0xc0, 0x80, 0x00,
            0x7c, 0xc6, 0xce, 0xde,  0xf6, 0xe6, 0x7c, 0x00,
            0x30, 0x70, 0x30, 0x30,  0x30, 0x30, 0xfc, 0x00,
            0x78, 0xcc, 0x0c, 0x38,  0x60, 0xcc, 0xfc, 0x00,
            0x78, 0xcc, 0x0c, 0x38,  0x0c, 0xcc, 0x78, 0x00,
            0x1c, 0x3c, 0x6c, 0xcc,  0xfe, 0x0c, 0x1e, 0x00,
            0xfc, 0xc0, 0xf8, 0x0c,  0x0c, 0xcc, 0x78, 0x00,
            0x38, 0x60, 0xc0, 0xf8,  0xcc, 0xcc, 0x78, 0x00,
            0xfc, 0xcc, 0x0c, 0x18,  0x30, 0x30, 0x30, 0x00,
            0x78, 0xcc, 0xcc, 0x78,  0xcc, 0xcc, 0x78, 0x00,
            0x78, 0xcc, 0xcc, 0x7c,  0x0c, 0x18, 0x70, 0x00,
            0x00, 0x30, 0x30, 0x00,  0x00, 0x30, 0x30, 0x00,
            0x00, 0x30, 0x30, 0x00,  0x00, 0x30, 0x30, 0x60,
            0x18, 0x30, 0x60, 0xc0,  0x60, 0x30, 0x18, 0x00,
            0x00, 0x00, 0xfc, 0x00,  0x00, 0xfc, 0x00, 0x00,
            0x60, 0x30, 0x18, 0x0c,  0x18, 0x30, 0x60, 0x00,
            0x78, 0xcc, 0x0c, 0x18,  0x30, 0x00, 0x30, 0x00,
            0x7c, 0xc6, 0xde, 0xde,  0xde, 0xc0, 0x78, 0x00,
            0x30, 0x78, 0xcc, 0xcc,  0xfc, 0xcc, 0xcc, 0x00,
            0xfc, 0x66, 0x66, 0x7c,  0x66, 0x66, 0xfc, 0x00,
            0x3c, 0x66, 0xc0, 0xc0,  0xc0, 0x66, 0x3c, 0x00,
            0xf8, 0x6c, 0x66, 0x66,  0x66, 0x6c, 0xf8, 0x00,
            0xfe, 0x62, 0x68, 0x78,  0x68, 0x62, 0xfe, 0x00,
            0xfe, 0x62, 0x68, 0x78,  0x68, 0x60, 0xf0, 0x00,
            0x3c, 0x66, 0xc0, 0xc0,  0xce, 0x66, 0x3e, 0x00,
            0xcc, 0xcc, 0xcc, 0xfc,  0xcc, 0xcc, 0xcc, 0x00,
            0x78, 0x30, 0x30, 0x30,  0x30, 0x30, 0x78, 0x00,
            0x1e, 0x0c, 0x0c, 0x0c,  0xcc, 0xcc, 0x78, 0x00,
            0xe6, 0x66, 0x6c, 0x78,  0x6c, 0x66, 0xe6, 0x00,
            0xf0, 0x60, 0x60, 0x60,  0x62, 0x66, 0xfe, 0x00,
            0xc6, 0xee, 0xfe, 0xfe,  0xd6, 0xc6, 0xc6, 0x00,
            0xc6, 0xe6, 0xf6, 0xde,  0xce, 0xc6, 0xc6, 0x00,
            0x38, 0x6c, 0xc6, 0xc6,  0xc6, 0x6c, 0x38, 0x00,
            0xfc, 0x66, 0x66, 0x7c,  0x60, 0x60, 0xf0, 0x00,
            0x78, 0xcc, 0xcc, 0xcc,  0xdc, 0x78, 0x1c, 0x00,
            0xfc, 0x66, 0x66, 0x7c,  0x6c, 0x66, 0xe6, 0x00,
            0x78, 0xcc, 0xe0, 0x70,  0x1c, 0xcc, 0x78, 0x00,
            0xfc, 0xb4, 0x30, 0x30,  0x30, 0x30, 0x78, 0x00,
            0xcc, 0xcc, 0xcc, 0xcc,  0xcc, 0xcc, 0xfc, 0x00,
            0xcc, 0xcc, 0xcc, 0xcc,  0xcc, 0x78, 0x30, 0x00,
            0xc6, 0xc6, 0xc6, 0xd6,  0xfe, 0xee, 0xc6, 0x00,
            0xc6, 0xc6, 0x6c, 0x38,  0x38, 0x6c, 0xc6, 0x00,
            0xcc, 0xcc, 0xcc, 0x78,  0x30, 0x30, 0x78, 0x00,
            0xfe, 0xc6, 0x8c, 0x18,  0x32, 0x66, 0xfe, 0x00,
            0x78, 0x60, 0x60, 0x60,  0x60, 0x60, 0x78, 0x00,
            0xc0, 0x60, 0x30, 0x18,  0x0c, 0x06, 0x02, 0x00,
            0x78, 0x18, 0x18, 0x18,  0x18, 0x18, 0x78, 0x00,
            0x10, 0x38, 0x6c, 0xc6,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0xff,
            0x30, 0x30, 0x18, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x78, 0x0c,  0x7c, 0xcc, 0x76, 0x00,
            0xe0, 0x60, 0x60, 0x7c,  0x66, 0x66, 0xdc, 0x00,
            0x00, 0x00, 0x78, 0xcc,  0xc0, 0xcc, 0x78, 0x00,
            0x1c, 0x0c, 0x0c, 0x7c,  0xcc, 0xcc, 0x76, 0x00,
            0x00, 0x00, 0x78, 0xcc,  0xfc, 0xc0, 0x78, 0x00,
            0x38, 0x6c, 0x60, 0xf0,  0x60, 0x60, 0xf0, 0x00,
            0x00, 0x00, 0x76, 0xcc,  0xcc, 0x7c, 0x0c, 0xf8,
            0xe0, 0x60, 0x6c, 0x76,  0x66, 0x66, 0xe6, 0x00,
            0x30, 0x00, 0x70, 0x30,  0x30, 0x30, 0x78, 0x00,
            0x0c, 0x00, 0x0c, 0x0c,  0x0c, 0xcc, 0xcc, 0x78,
            0xe0, 0x60, 0x66, 0x6c,  0x78, 0x6c, 0xe6, 0x00,
            0x70, 0x30, 0x30, 0x30,  0x30, 0x30, 0x78, 0x00,
            0x00, 0x00, 0xcc, 0xfe,  0xfe, 0xd6, 0xc6, 0x00,
            0x00, 0x00, 0xf8, 0xcc,  0xcc, 0xcc, 0xcc, 0x00,
            0x00, 0x00, 0x78, 0xcc,  0xcc, 0xcc, 0x78, 0x00,
            0x00, 0x00, 0xdc, 0x66,  0x66, 0x7c, 0x60, 0xf0,
            0x00, 0x00, 0x76, 0xcc,  0xcc, 0x7c, 0x0c, 0x1e,
            0x00, 0x00, 0xdc, 0x76,  0x66, 0x60, 0xf0, 0x00,
            0x00, 0x00, 0x7c, 0xc0,  0x78, 0x0c, 0xf8, 0x00,
            0x10, 0x30, 0x7c, 0x30,  0x30, 0x34, 0x18, 0x00,
            0x00, 0x00, 0xcc, 0xcc,  0xcc, 0xcc, 0x76, 0x00,
            0x00, 0x00, 0xcc, 0xcc,  0xcc, 0x78, 0x30, 0x00,
            0x00, 0x00, 0xc6, 0xd6,  0xfe, 0xfe, 0x6c, 0x00,
            0x00, 0x00, 0xc6, 0x6c,  0x38, 0x6c, 0xc6, 0x00,
            0x00, 0x00, 0xcc, 0xcc,  0xcc, 0x7c, 0x0c, 0xf8,
            0x00, 0x00, 0xfc, 0x98,  0x30, 0x64, 0xfc, 0x00,
            0x1c, 0x30, 0x30, 0xe0,  0x30, 0x30, 0x1c, 0x00,
            0x18, 0x18, 0x18, 0x00,  0x18, 0x18, 0x18, 0x00,
            0xe0, 0x30, 0x30, 0x1c,  0x30, 0x30, 0xe0, 0x00,
            0x76, 0xdc, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x38, 0x6c,  0xc6, 0xc6, 0xfe, 0x00,
            0x78, 0xcc, 0xc0, 0xcc,  0x78, 0x18, 0x0c, 0x78,
            0x00, 0xcc, 0x00, 0xcc,  0xcc, 0xcc, 0x7e, 0x00,
            0x1c, 0x00, 0x78, 0xcc,  0xfc, 0xc0, 0x78, 0x00,
            0x7e, 0xc3, 0x3c, 0x06,  0x3e, 0x66, 0x3f, 0x00,
            0xcc, 0x00, 0x78, 0x0c,  0x7c, 0xcc, 0x7e, 0x00,
            0xe0, 0x00, 0x78, 0x0c,  0x7c, 0xcc, 0x7e, 0x00,
            0x30, 0x30, 0x78, 0x0c,  0x7c, 0xcc, 0x7e, 0x00,
            0x00, 0x00, 0x78, 0xc0,  0xc0, 0x78, 0x0c, 0x38,
            0x7e, 0xc3, 0x3c, 0x66,  0x7e, 0x60, 0x3c, 0x00,
            0xcc, 0x00, 0x78, 0xcc,  0xfc, 0xc0, 0x78, 0x00,
            0xe0, 0x00, 0x78, 0xcc,  0xfc, 0xc0, 0x78, 0x00,
            0xcc, 0x00, 0x70, 0x30,  0x30, 0x30, 0x78, 0x00,
            0x7c, 0xc6, 0x38, 0x18,  0x18, 0x18, 0x3c, 0x00,
            0xe0, 0x00, 0x70, 0x30,  0x30, 0x30, 0x78, 0x00,
            0xc6, 0x38, 0x6c, 0xc6,  0xfe, 0xc6, 0xc6, 0x00,
            0x30, 0x30, 0x00, 0x78,  0xcc, 0xfc, 0xcc, 0x00,
            0x1c, 0x00, 0xfc, 0x60,  0x78, 0x60, 0xfc, 0x00,
            0x00, 0x00, 0x7f, 0x0c,  0x7f, 0xcc, 0x7f, 0x00,
            0x3e, 0x6c, 0xcc, 0xfe,  0xcc, 0xcc, 0xce, 0x00,
            0x78, 0xcc, 0x00, 0x78,  0xcc, 0xcc, 0x78, 0x00,
            0x00, 0xcc, 0x00, 0x78,  0xcc, 0xcc, 0x78, 0x00,
            0x00, 0xe0, 0x00, 0x78,  0xcc, 0xcc, 0x78, 0x00,
            0x78, 0xcc, 0x00, 0xcc,  0xcc, 0xcc, 0x7e, 0x00,
            0x00, 0xe0, 0x00, 0xcc,  0xcc, 0xcc, 0x7e, 0x00,
            0x00, 0xcc, 0x00, 0xcc,  0xcc, 0x7c, 0x0c, 0xf8,
            0xc3, 0x18, 0x3c, 0x66,  0x66, 0x3c, 0x18, 0x00,
            0xcc, 0x00, 0xcc, 0xcc,  0xcc, 0xcc, 0x78, 0x00,
            0x18, 0x18, 0x7e, 0xc0,  0xc0, 0x7e, 0x18, 0x18,
            0x38, 0x6c, 0x64, 0xf0,  0x60, 0xe6, 0xfc, 0x00,
            0xcc, 0xcc, 0x78, 0xfc,  0x30, 0xfc, 0x30, 0x30,
            0xf8, 0xcc, 0xcc, 0xfa,  0xc6, 0xcf, 0xc6, 0xc7,
            0x0e, 0x1b, 0x18, 0x3c,  0x18, 0x18, 0xd8, 0x70,
            0x1c, 0x00, 0x78, 0x0c,  0x7c, 0xcc, 0x7e, 0x00,
            0x38, 0x00, 0x70, 0x30,  0x30, 0x30, 0x78, 0x00,
            0x00, 0x1c, 0x00, 0x78,  0xcc, 0xcc, 0x78, 0x00,
            0x00, 0x1c, 0x00, 0xcc,  0xcc, 0xcc, 0x7e, 0x00,
            0x00, 0xf8, 0x00, 0xf8,  0xcc, 0xcc, 0xcc, 0x00,
            0xfc, 0x00, 0xcc, 0xec,  0xfc, 0xdc, 0xcc, 0x00,
            0x3c, 0x6c, 0x6c, 0x3e,  0x00, 0x7e, 0x00, 0x00,
            0x38, 0x6c, 0x6c, 0x38,  0x00, 0x7c, 0x00, 0x00,
            0x30, 0x00, 0x30, 0x60,  0xc0, 0xcc, 0x78, 0x00,
            0x00, 0x00, 0x00, 0xfc,  0xc0, 0xc0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc,  0x0c, 0x0c, 0x00, 0x00,
            0xc3, 0xc6, 0xcc, 0xde,  0x33, 0x66, 0xcc, 0x0f,
            0xc3, 0xc6, 0xcc, 0xdb,  0x37, 0x6f, 0xcf, 0x03,
            0x18, 0x18, 0x00, 0x18,  0x18, 0x18, 0x18, 0x00,
            0x00, 0x33, 0x66, 0xcc,  0x66, 0x33, 0x00, 0x00,
            0x00, 0xcc, 0x66, 0x33,  0x66, 0xcc, 0x00, 0x00,
            0x22, 0x88, 0x22, 0x88,  0x22, 0x88, 0x22, 0x88,
            0x55, 0xaa, 0x55, 0xaa,  0x55, 0xaa, 0x55, 0xaa,
            0xdb, 0x77, 0xdb, 0xee,  0xdb, 0x77, 0xdb, 0xee,
            0x18, 0x18, 0x18, 0x18,  0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18,  0xf8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0xf8, 0x18,  0xf8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36,  0xf6, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00,  0xfe, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xf8, 0x18,  0xf8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0xf6, 0x06,  0xf6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36,  0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xfe, 0x06,  0xf6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xf6, 0x06,  0xfe, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36,  0xfe, 0x00, 0x00, 0x00,
            0x18, 0x18, 0xf8, 0x18,  0xf8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0xf8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18,  0x1f, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18,  0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0xff, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18,  0x1f, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00,  0xff, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18,  0xff, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x1f, 0x18,  0x1f, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36,  0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30,  0x3f, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3f, 0x30,  0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xf7, 0x00,  0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0x00,  0xf7, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30,  0x37, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xff, 0x00,  0xff, 0x00, 0x00, 0x00,
            0x36, 0x36, 0xf7, 0x00,  0xf7, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xff, 0x00,  0xff, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36,  0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0x00,  0xff, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00,  0xff, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36,  0x3f, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x1f, 0x18,  0x1f, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1f, 0x18,  0x1f, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00,  0x3f, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36,  0xff, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xff, 0x18,  0xff, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18,  0xf8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x1f, 0x18, 0x18, 0x18,
            0xff, 0xff, 0xff, 0xff,  0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00,  0xff, 0xff, 0xff, 0xff,
            0xf0, 0xf0, 0xf0, 0xf0,  0xf0, 0xf0, 0xf0, 0xf0,
            0x0f, 0x0f, 0x0f, 0x0f,  0x0f, 0x0f, 0x0f, 0x0f,
            0xff, 0xff, 0xff, 0xff,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x76, 0xdc,  0xc8, 0xdc, 0x76, 0x00,
            0x00, 0x78, 0xcc, 0xf8,  0xcc, 0xf8, 0xc0, 0xc0,
            0x00, 0xfc, 0xcc, 0xc0,  0xc0, 0xc0, 0xc0, 0x00,
            0x00, 0xfe, 0x6c, 0x6c,  0x6c, 0x6c, 0x6c, 0x00,
            0xfc, 0xcc, 0x60, 0x30,  0x60, 0xcc, 0xfc, 0x00,
            0x00, 0x00, 0x7e, 0xd8,  0xd8, 0xd8, 0x70, 0x00,
            0x00, 0x66, 0x66, 0x66,  0x66, 0x7c, 0x60, 0xc0,
            0x00, 0x76, 0xdc, 0x18,  0x18, 0x18, 0x18, 0x00,
            0xfc, 0x30, 0x78, 0xcc,  0xcc, 0x78, 0x30, 0xfc,
            0x38, 0x6c, 0xc6, 0xfe,  0xc6, 0x6c, 0x38, 0x00,
            0x38, 0x6c, 0xc6, 0xc6,  0x6c, 0x6c, 0xee, 0x00,
            0x1c, 0x30, 0x18, 0x7c,  0xcc, 0xcc, 0x78, 0x00,
            0x00, 0x00, 0x7e, 0xdb,  0xdb, 0x7e, 0x00, 0x00,
            0x06, 0x0c, 0x7e, 0xdb,  0xdb, 0x7e, 0x60, 0xc0,
            0x38, 0x60, 0xc0, 0xf8,  0xc0, 0x60, 0x38, 0x00,
            0x78, 0xcc, 0xcc, 0xcc,  0xcc, 0xcc, 0xcc, 0x00,
            0x00, 0xfc, 0x00, 0xfc,  0x00, 0xfc, 0x00, 0x00,
            0x30, 0x30, 0xfc, 0x30,  0x30, 0x00, 0xfc, 0x00,
            0x60, 0x30, 0x18, 0x30,  0x60, 0x00, 0xfc, 0x00,
            0x18, 0x30, 0x60, 0x30,  0x18, 0x00, 0xfc, 0x00,
            0x0e, 0x1b, 0x1b, 0x18,  0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18,  0x18, 0xd8, 0xd8, 0x70,
            0x30, 0x30, 0x00, 0xfc,  0x00, 0x30, 0x30, 0x00,
            0x00, 0x76, 0xdc, 0x00,  0x76, 0xdc, 0x00, 0x00,
            0x38, 0x6c, 0x6c, 0x38,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x18,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x18, 0x00, 0x00, 0x00,
            0x0f, 0x0c, 0x0c, 0x0c,  0xec, 0x6c, 0x3c, 0x1c,
            0x78, 0x6c, 0x6c, 0x6c,  0x6c, 0x00, 0x00, 0x00,
            0x70, 0x18, 0x30, 0x60,  0x78, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3c, 0x3c,  0x3c, 0x3c, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        };


// first... my internal font...
unsigned char __font_data[224][8] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x3c, 0x3c, 0x38, 0x38, 0x30, 0x00, 0x30, 0x00 },
    { 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00 },
    { 0x18, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x18, 0x00 },
    { 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00 },
    { 0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00 },
    { 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00 },
    { 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00 },
    { 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00 },
    { 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30 },
    { 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 },
    { 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00 },
    { 0x7c, 0xc6, 0xce, 0xd6, 0xe6, 0xc6, 0x7c, 0x00 },
    { 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
    { 0x7c, 0xc6, 0x06, 0x7c, 0xc0, 0xc0, 0xfe, 0x00 },
    { 0xfc, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xfc, 0x00 },
    { 0x0c, 0xcc, 0xcc, 0xcc, 0xfe, 0x0c, 0x0c, 0x00 },
    { 0xfe, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00 },
    { 0x7c, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0xfe, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x00 },
    { 0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x7c, 0x00 },
    { 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00 },
    { 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30 },
    { 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00 },
    { 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00 },
    { 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00 },
    { 0x3c, 0x66, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x00 },
    { 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x7e, 0x00 },
    { 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00 },
    { 0xfc, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0x00 },
    { 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00 },
    { 0xf8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0xf8, 0x00 },
    { 0xfe, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xfe, 0x00 },
    { 0xfe, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xc0, 0x00 },
    { 0x7c, 0xc6, 0xc0, 0xc0, 0xce, 0xc6, 0x7c, 0x00 },
    { 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00 },
    { 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00 },
    { 0x06, 0x06, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00 },
    { 0xc6, 0xcc, 0xd8, 0xf0, 0xd8, 0xcc, 0xc6, 0x00 },
    { 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0x00 },
    { 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00 },
    { 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00 },
    { 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0xc0, 0x00 },
    { 0x7c, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x06 },
    { 0xfc, 0xc6, 0xc6, 0xfc, 0xd8, 0xcc, 0xc6, 0x00 },
    { 0x7c, 0xc6, 0xc0, 0x7c, 0x06, 0xc6, 0x7c, 0x00 },
    { 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
    { 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0x00 },
    { 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x38, 0x00 },
    { 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0x6c, 0x00 },
    { 0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00 },
    { 0xc6, 0xc6, 0xc6, 0x7c, 0x18, 0x30, 0xe0, 0x00 },
    { 0xfe, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xfe, 0x00 },
    { 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00 },
    { 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00 },
    { 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00 },
    { 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff },
    { 0x18, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00 },
    { 0xc0, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xfc, 0x00 },
    { 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc6, 0x7c, 0x00 },
    { 0x06, 0x06, 0x06, 0x7e, 0xc6, 0xc6, 0x7e, 0x00 },
    { 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 },
    { 0x1c, 0x36, 0x30, 0x78, 0x30, 0x30, 0x30, 0x00 },
    { 0x00, 0x00, 0x7e, 0xc6, 0xc6, 0x7e, 0x06, 0xfc },
    { 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x00 },
    { 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x00 },
    { 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0xc6, 0x7c },
    { 0xc0, 0xc0, 0xcc, 0xd8, 0xf8, 0xcc, 0xc6, 0x00 },
    { 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
    { 0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xd6, 0x00 },
    { 0x00, 0x00, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x00 },
    { 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0x00, 0x00, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0 },
    { 0x00, 0x00, 0x7e, 0xc6, 0xc6, 0x7e, 0x06, 0x06 },
    { 0x00, 0x00, 0xfc, 0xc6, 0xc0, 0xc0, 0xc0, 0x00 },
    { 0x00, 0x00, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x00 },
    { 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x0e, 0x00 },
    { 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x00 },
    { 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7c, 0x38, 0x00 },
    { 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xfe, 0x6c, 0x00 },
    { 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00 },
    { 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0xfc },
    { 0x00, 0x00, 0xfe, 0x0c, 0x38, 0x60, 0xfe, 0x00 },
    { 0x0e, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0e, 0x00 },
    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 },
    { 0x70, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x70, 0x00 },
    { 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00 },
    { 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xd6, 0x7c, 0x30 },
    { 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x00 },
    { 0x0e, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 },
    { 0x7e, 0x81, 0x3c, 0x06, 0x7e, 0xc6, 0x7e, 0x00 },
    { 0x66, 0x00, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00 },
    { 0xe0, 0x00, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00 },
    { 0x18, 0x18, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00 },
    { 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xd6, 0x7c, 0x30 },
    { 0x7e, 0x81, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 },
    { 0x66, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 },
    { 0xe0, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 },
    { 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00 },
    { 0x7c, 0x82, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00 },
    { 0x70, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00 },
    { 0xc6, 0x10, 0x7c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00 },
    { 0x38, 0x38, 0x00, 0x7c, 0xc6, 0xfe, 0xc6, 0x00 },
    { 0x0e, 0x00, 0xfe, 0xc0, 0xf8, 0xc0, 0xfe, 0x00 },
    { 0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00 },
    { 0x3f, 0x6c, 0xcc, 0xff, 0xcc, 0xcc, 0xcf, 0x00 },
    { 0x7c, 0x82, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0x66, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0xe0, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0x7c, 0x82, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x00 },
    { 0xe0, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x00 },
    { 0x66, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x7c },
    { 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0x00 },
    { 0x18, 0x18, 0x7e, 0xd8, 0xd8, 0xd8, 0x7e, 0x18 },
    { 0x38, 0x6c, 0x60, 0xf0, 0x60, 0x66, 0xfc, 0x00 },
    { 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18 },
    { 0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc3 },
    { 0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70 },
    { 0x0e, 0x00, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00 },
    { 0x1c, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00 },
    { 0x0e, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0x0e, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x00 },
    { 0x00, 0xfe, 0x00, 0xfc, 0xc6, 0xc6, 0xc6, 0x00 },
    { 0xfe, 0x00, 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0x00 },
    { 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00 },
    { 0x3c, 0x66, 0x66, 0x3c, 0x00, 0x7e, 0x00, 0x00 },
    { 0x18, 0x00, 0x18, 0x18, 0x30, 0x66, 0x3c, 0x00 },
    { 0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00 },
    { 0xc6, 0xcc, 0xd8, 0x3f, 0x63, 0xcf, 0x8c, 0x0f },
    { 0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6d, 0xcf, 0x03 },
    { 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
    { 0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00 },
    { 0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00 },
    { 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88 },
    { 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa },
    { 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77 },
    { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 },
    { 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18 },
    { 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18 },
    { 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36 },
    { 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36 },
    { 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18 },
    { 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36 },
    { 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36 },
    { 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36 },
    { 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00 },
    { 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00 },
    { 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18 },
    { 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00 },
    { 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18 },
    { 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18 },
    { 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00 },
    { 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18 },
    { 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18 },
    { 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36 },
    { 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36 },
    { 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36 },
    { 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36 },
    { 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00 },
    { 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36 },
    { 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00 },
    { 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18 },
    { 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36 },
    { 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00 },
    { 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18 },
    { 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36 },
    { 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36 },
    { 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18 },
    { 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18 },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff },
    { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 },
    { 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f },
    { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00 },
    { 0x38, 0x6c, 0x6c, 0x78, 0x6c, 0x66, 0x6c, 0x60 },
    { 0x00, 0xfe, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0x00 },
    { 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x00 },
    { 0xfe, 0x60, 0x30, 0x18, 0x30, 0x60, 0xfe, 0x00 },
    { 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00 },
    { 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0 },
    { 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00 },
    { 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x7e },
    { 0x3c, 0x66, 0xc3, 0xff, 0xc3, 0x66, 0x3c, 0x00 },
    { 0x3c, 0x66, 0xc3, 0xc3, 0x66, 0x66, 0xe7, 0x00 },
    { 0x0e, 0x18, 0x0c, 0x7e, 0xc6, 0xc6, 0x7c, 0x00 },
    { 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00 },
    { 0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0 },
    { 0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00 },
    { 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00 },
    { 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00 },
    { 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x7e, 0x00 },
    { 0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00 },
    { 0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00 },
    { 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18 },
    { 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70 },
    { 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00 },
    { 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00 },
    { 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00 },
    { 0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c },
    { 0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00 },
    { 0x7c, 0x0c, 0x7c, 0x60, 0x7c, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00 },
    { 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

LFONT xinternalFont = {
    ' ', ' '+224,
    8, 8,
    (unsigned char *)__font_data
};

LFONT internalFont = {
    0, 256,
    8, 8,
    __vga_font
};



#define kInternalFontPath "@@internal@@"

Font::Font(QObject *parent)
    : QObject(parent)
    , fontDirectory( "/" )
    , currentFontPath( kInternalFontPath )
    , currentFontName( "" )
{
    /* start out by allocing the buffer */
    this->theFont.data = new unsigned char[ 8 * 256 ];

    /* and for now, we have a fixed width/heighth font 8x8px */
    this->theFont.w = 8;
    this->theFont.h = 8;

}

Font::~Font()
{
    delete this->theFont.data;
}

//////////////////////////////////////////////////////////////////////////////

void Font::Setup( void )
{
    this->currentFontName = this->NameFromPath( this->currentFontPath );
    this->LoadCurrentSelection();
}

void Font::UpSet( void )
{

}


//////////////////////////////////////////////////////////////////////////////
#ifdef NEVER
bool Font::FileExists(QString path)
{
    QFileInfo checkFile(path);
    // check if file exists and if yes: Is it really a file and no directory?
    if (checkFile.exists() && checkFile.isFile()) {
        return true;
    } else {
        return false;
    }
}
#endif

int Font::GetNumFontsAvailable()
{
    QDir fontdir( this->fontDirectory );
    fontdir.setNameFilters( QStringList() << "*.png");
    QStringList fileList = fontdir.entryList();

    return fileList.count();
}

QString Font::PathForFontAt( int which )
{
    if( which < 0 ) return kInternalFontPath;

    QDir fontdir( this->fontDirectory );
    fontdir.setNameFilters( QStringList() << "*.png");
    QStringList fileList = fontdir.entryList();

    if( which > fileList.count() )
        return kInternalFontPath;

    return( this->fontDirectory + "/" + fileList.at( which ));
}

QString Font::NameFromPath( QString pth )
{
    if( !pth.compare( kInternalFontPath )) return "internal font";

    QString tmp = pth.left( pth.lastIndexOf(".") );

    return tmp.right( tmp.length() - tmp.lastIndexOf( ("/")) -1 );
}

int Font::IndexOfPath( QString pth )
{
    for( int i=0 ; i<this->GetNumFontsAvailable() ; i++ )
    {
        if( !pth.compare( this->PathForFontAt(i)))
            return i;
    }

    // didn't find it, go to the internal one
    return -1;
}

//////////////////////////////////////////////////////////////////////////////
void Font::ToggleFont()
{
    int i = this->IndexOfPath( this->currentFontPath );

    i++;
    if( i >= this->GetNumFontsAvailable() ) {
        i = -1;
    }

    this->currentFontPath = this->PathForFontAt( i );
    this->currentFontName = this->NameFromPath( this->currentFontPath );

    this->LoadCurrentSelection();
}

//////////////////////////////////////////////////////////////////////////////
void Font::SaveStruct()
{
    qDebug() << "unsigned char xxxfont[] = {";
    for( int i=0 ; i < 256 ; i++ )
    {
        char buf[132];
        char ch = 0;
        if( i < 32 || i > 126 ) ch = '.';
        else ch = (char) i;
        snprintf( buf, 132, "    0x%02x, 0x%02x, 0x%02x, 0x%02x,  0x%02x, 0x%02x, 0x%02x, 0x%02x,  /* %d: %c */",
                this->theFont.data[ (i*8) + 0 ],
                this->theFont.data[ (i*8) + 1 ],
                this->theFont.data[ (i*8) + 2 ],
                this->theFont.data[ (i*8) + 3 ],
                this->theFont.data[ (i*8) + 4 ],
                this->theFont.data[ (i*8) + 5 ],
                this->theFont.data[ (i*8) + 6 ],
                this->theFont.data[ (i*8) + 7 ],
                i, ch );
        qDebug() << buf;

    }
    qDebug() << "};";
}

void Font::LoadCurrentSelection()
{
    /* check to see if we're switching to the internal font */
    if( !this->currentFontPath.compare( kInternalFontPath )) {
        this->theFont.startchar = internalFont.startchar;
        this->theFont.maxchar   = internalFont.maxchar;

        std::memcpy( (void *) this->theFont.data,
                     (void *) internalFont.data,
                     (this->theFont.maxchar - this->theFont.startchar) * 8 );
        emit this->NewFontLoaded();
        return;
    }

    /* load the image file and parse it into the font struct */

    QImage *fontimage = new QImage( this->currentFontPath );
    if( !fontimage ) {
        qDebug() << "ERROR: Couldn't load " << this->currentFontPath;
        return;
    }

    if( (fontimage->width() != 289)  || (fontimage->height() != 73) )
    {
        qDebug() << "ERROR: Font was " << fontimage->width() << "x" << fontimage->height() << ", rather than 289x73!";
        return;
    }

    /* for now, we're using a single fixed image size,
     * 32 glyphs across, 8 glyphs down
     * each glyph is 8x8 pixels, fixed
     * each glyph is surrounded by a red box, with overlapping edges
     */
    this->theFont.startchar = 0;
    this->theFont.maxchar   = 255;

    int x=1;
    int y=1;
    for( int glyph = 0 ; glyph < 255 ; glyph++ )
    {
        /* read in the image data and convert it to bitsmashed */
        for( int py=0 ; py<8 ; py++ )
        {
            unsigned char pixdata = 0x00;
            if( qGreen( fontimage->pixel( x+0, y+py )) > 128 )   pixdata |= 0x80;
            if( qGreen( fontimage->pixel( x+1, y+py )) > 128 )   pixdata |= 0x40;
            if( qGreen( fontimage->pixel( x+2, y+py )) > 128 )   pixdata |= 0x20;
            if( qGreen( fontimage->pixel( x+3, y+py )) > 128 )   pixdata |= 0x10;
            if( qGreen( fontimage->pixel( x+4, y+py )) > 128 )   pixdata |= 0x08;
            if( qGreen( fontimage->pixel( x+5, y+py )) > 128 )   pixdata |= 0x04;
            if( qGreen( fontimage->pixel( x+6, y+py )) > 128 )   pixdata |= 0x02;
            if( qGreen( fontimage->pixel( x+7, y+py )) > 128 )   pixdata |= 0x01;
            this->theFont.data[ (glyph * 8) + py ] = pixdata;
        }

        /* advance to the next glyph */
        x+=9;
        if( x+8 > fontimage->width() ) {
            x=1;
            y+=9;
        }
    }

    emit this->NewFontLoaded();
    //this->SaveStruct();
}


//////////////////////////////////////////////////////////////////////////////

#include <QFileDialog>

void Font::RequestFontDirectory()
{
    QString str = QFileDialog::getExistingDirectory( NULL,
                                                     "Choose your fonts directory",
                                                     this->fontDirectory,
                                                     QFileDialog::DontResolveSymlinks );
    this->SetFontDirectory( str );
    this->SaveSettings();
}

//////////////////////////////////////////////////////////////////////////////


void Font::SaveSettings()
{
    SETUPSETTINGS();
    s.setValue( kSettings_FontPath, this->currentFontPath );
    s.setValue( kSettings_FontName, this->currentFontName );
    s.setValue( kSettings_FontDirectory, this->fontDirectory );
}


void Font::LoadSettings()
{
    SETUPSETTINGS();

    // 1. setup the font directory
    this->fontDirectory = s.value( kSettings_FontDirectory, "" ).toString();
    this->SetFontDirectory( this->fontDirectory );

    // 2. set up the font name
    this->currentFontName = s.value( kSettings_FontName, "" ).toString();

    // 3. set up the font path.
    this->currentFontPath = "";

#ifdef NEVER
    // if the font path is valid, we're fine.  Otherwise, we need to search throug
    // the font directory for the correct font.
    if( !this->FileExists( this->currentFontPath ) )
    {
        /* font not found, need to figure it out */
    }
#endif
    // 3a. find the font in the directory, if it exists

    for( int j=0 ; j < this->GetNumFontsAvailable() ; j++ ) {
        QString pth = this->PathForFontAt( j );
        QString nm = this->NameFromPath( pth );
        if( !nm.compare( this->currentFontName )) {
            this->currentFontPath = pth;
        }
    }

    this->LoadCurrentSelection();
}
